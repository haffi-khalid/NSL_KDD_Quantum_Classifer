"""
This script visualizes the transferability of FGSM adversarial examples
generated by a quantum model and evaluated on both quantum and CNN models.

Includes:
- Accuracy vs Epsilon plot
- Loss vs Epsilon plot
- Combined subplot
- Heatmaps (replace dummy matrices with real ones if available)

Author: Muhammad Haffi Khalid
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
import os

# === PATHS ===
metrics_path = r"C:\Users\haffi\OneDrive - University of Birmingham\Documents\Desktop\NSL-KDD Quantum Classifier\Attacks_against_each_other\Quantum_vs_CNN\metrics\metrics_quantum_vs_CNN.csv"

plot_dir = r"C:\Users\haffi\OneDrive - University of Birmingham\Documents\Desktop\NSL-KDD Quantum Classifier\Attacks_against_each_other\Quantum_vs_CNN\plots"
analysis_dir = r"C:\Users\haffi\OneDrive - University of Birmingham\Documents\Desktop\NSL-KDD Quantum Classifier\Attacks_against_each_other\Quantum_vs_CNN\analysis"
heatmap_dir = r"C:\Users\haffi\OneDrive - University of Birmingham\Documents\Desktop\NSL-KDD Quantum Classifier\Attacks_against_each_other\Quantum_vs_CNN\heatmaps"

os.makedirs(plot_dir, exist_ok=True)
os.makedirs(analysis_dir, exist_ok=True)
os.makedirs(heatmap_dir, exist_ok=True)

# === LOAD METRICS ===
df = pd.read_csv(metrics_path)

epsilons = df["epsilon"]
acc_cc = df["acc_cnn_on_cnn"]
acc_cq = df["acc_cnn_on_quantum"]
loss_cc = df["loss_cnn_on_cnn"]
loss_cq = df["loss_cnn_on_quantum"]

# === PLOT 1: Accuracy vs Epsilon ===
plt.figure(figsize=(8, 5))
plt.plot(epsilons, acc_qq, marker='o', label='Quantum on Quantum')
plt.plot(epsilons, acc_qc, marker='o', label='Quantum on CNN')
plt.title("Accuracy vs Epsilon (Quantum-generated FGSM)")
plt.xlabel("Epsilon")
plt.ylabel("Accuracy")
plt.grid(True)
plt.legend()
plt.savefig(os.path.join(plot_dir, "accuracy_vs_epsilon.png"))
plt.close()

# === PLOT 2: Loss vs Epsilon ===
plt.figure(figsize=(8, 5))
plt.plot(epsilons, loss_qq, marker='o', label='Quantum on Quantum')
plt.plot(epsilons, loss_qc, marker='o', label='Quantum on CNN')
plt.title("Adversarial Test Loss vs Epsilon (Quantum-generated FGSM)")
plt.xlabel("Epsilon")
plt.ylabel("Loss")
plt.grid(True)
plt.legend()
plt.savefig(os.path.join(plot_dir, "loss_vs_epsilon.png"))
plt.close()

# === SUBPLOTS ===
fig, axs = plt.subplots(1, 2, figsize=(14, 5))

axs[0].plot(epsilons, acc_qq, marker='o', label='Quantum on Quantum')
axs[0].plot(epsilons, acc_qc, marker='o', label='Quantum on CNN')
axs[0].set_title("Accuracy vs Epsilon")
axs[0].set_xlabel("Epsilon")
axs[0].set_ylabel("Accuracy")
axs[0].legend()
axs[0].grid(True)

axs[1].plot(epsilons, loss_qq, marker='o', label='Quantum on Quantum')
axs[1].plot(epsilons, loss_qc, marker='o', label='Quantum on CNN')
axs[1].set_title("Loss vs Epsilon")
axs[1].set_xlabel("Epsilon")
axs[1].set_ylabel("Loss")
axs[1].legend()
axs[1].grid(True)

plt.suptitle("FGSM Attack (Generated by Quantum) â€” Evaluation on Quantum vs CNN")
plt.tight_layout()
plt.savefig(os.path.join(analysis_dir, "combined_subplots.png"))
plt.close()

# === DUMMY CONFUSION MATRICES (replace with actual ones when available) ===
dummy_labels = [0, 1, 0, 1]
dummy_preds_quantum = [0, 1, 1, 0]
dummy_preds_cnn = [0, 1, 0, 1]

cm_quantum = confusion_matrix(dummy_labels, dummy_preds_quantum)
cm_cnn = confusion_matrix(dummy_labels, dummy_preds_cnn)

# Quantum Heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(cm_quantum, annot=True, fmt='d', cmap='Purples')
plt.title("Quantum Model Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.savefig(os.path.join(heatmap_dir, "quantum_confusion_matrix.png"))
plt.close()

# CNN Heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(cm_cnn, annot=True, fmt='d', cmap='Blues')
plt.title("CNN Model Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.savefig(os.path.join(heatmap_dir, "cnn_confusion_matrix.png"))
plt.close()

print("[OK] All plots, subplots, and heatmaps have been generated and saved.")
